# docker-compose up --build
version: '3'

services:

  hapisimple:
    container_name: hapisimple
    # 直接用dockerfile构建
    build: .
    # build 存在时，image为指定构建的镜像名称及tag
    # build 不存在时，image为指定构建容器的镜像名称
    image: hapisimple:v1
    command: npm run start-docker-linux-mac
    # command: npm run start-cnblogs-V2-docker-linux-mac
    # command: npm run start-cnblogs-V3-docker-linux-mac
    networks:
      - local-comnet
      - local-redis-network
      - local-mysql-ms-network
      - local-rabbitmq-ms-network
      - local-mongo-ms-network
    
    # 连接yml文件内定义容器
    # links:
      # - local-mysql
      # - local-redis
      # - local-mongo
      # - local-rabbitmq1

    # 连接yml文件外运行的容器
    external_links:
      # 连接现有mongo容器
      - local-mongo

      # 连接现有redis容器
      - local-redis

      # 连接现有mysql容器
      - local-mysql-master

      # 连接现有rabbit容器
      - local-rabbitmq1
      - local-rabbitmq2
      - local-rabbitmq3
    
    # 定义yml文件内定义容器启动顺序
    #depends_on:
      # - local-mysql
      # - local-redis
      # - local-mongo
      # - local-rabbitmq1
    ports:
      - 8888:8888
    environment: #environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。设置容器的环境变量
      - TZ=Asia/Shanghai    
    restart: always

networks:

  # 引用现有redis集群网络
  local-redis-network:
    external:
      name: redis_local-redis-ms-network

  # 引用现有mysql集群网络
  local-mysql-ms-network:
    external:
      name: mysql_local-mysql-ms-network

  # 引用现有rabbit集群网络
  local-rabbitmq-ms-network:
    external:
      name: rabbitmq_local-rabbit-ms-network

  # 引用现有mongo集群网络
  local-mongo-ms-network:
    external:
      name: mongo_local-mongo-ms-network
      
  # 创建api网络
  local-comnet:
    driver: bridge